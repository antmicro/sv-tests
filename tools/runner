#!/usr/bin/env python3

import os
import re
import sys
import shutil
import logging
import argparse
import tempfile
from importlib import import_module

parser = argparse.ArgumentParser()

parser.add_argument("-r", "--runner",
                    required=True)

parser.add_argument("-t", "--test",
                    required=True)

args = parser.parse_args()

# setup logger
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)

ch = logging.StreamHandler()
ch.setFormatter(logging.Formatter('%(levelname)-8s| %(message)s'))
logger.addHandler(ch)

runner_obj = None

try:
    module = import_module('runners.' + args.runner)
    runner_cls = getattr(module, args.runner)
    runner_obj = runner_cls()
except Exception as e:
    logger.error("Unable to load runner module: {}".format(str(e)))
    sys.exit(1)

dirs = {}

try:
    dirs['out'] = os.environ['OUT_DIR']
    dirs['tests'] = os.environ['TESTS_DIR']
    dirs['runners'] = os.environ['RUNNERS_DIR']
except KeyError as e:
    logger.error("Required environment variables missing: {}".format(str(e)))
    sys.exit(1)

new_path = [os.path.abspath(dirs['out'] + "/runners/bin/"), os.environ['PATH']]

os.environ['PATH'] = ":".join(new_path)

runner = os.path.abspath(os.path.join(dirs['runners'], args.runner))
test = os.path.abspath(os.path.join(dirs['tests'], args.test))
out = os.path.abspath(os.path.join(dirs['out'],
                                   "logs",
                                   args.runner,
                                   args.test + ".log"))

req_test_params = ["name", "tags", "description",
                   "should_fail", "files", "incdirs",
                   "top_module"]

test_params = {}

# look for all required params
try:
    with open(test) as f:
        for l in f:
            param = re.search(r"^:([a-zA-Z_-]+):\s*(.+)", l)

            if param is None:
                continue

            param_name = param.group(1).lower()
            param_value = param.group(2)

            if param_name not in req_test_params:
                logger.warning("Unsupported test param found: {} - ignoring"
                               .format(param_name))
                continue

            test_params[param_name] = param_value

            if len(set(req_test_params) - set(test_params.keys())) == 0:
                # all parameters found
                break

        else:
            # set default values for optional metadata entries
            test_params.setdefault('files', test)
            test_params.setdefault('incdirs', '')
            test_params.setdefault('top_module', '')

            if len(set(req_test_params) - set(test_params.keys())) != 0:
                missing = list(set(req_test_params) - set(test_params.keys()))
                logger.error("Required parameters missing ({}) in {}"
                             .format(", ".join(missing), args.test))
                sys.exit(1)
except Exception as e:
    logger.error("Unable to parse test file: {}".format(str(e)))
    sys.exit(1)

test_params['files'] = test_params['files'].split()
test_params['incdirs'] = test_params['incdirs'].split()

try:
    tmp_dir = tempfile.mkdtemp()
except (PermissionError, FileExistsError) as e:
    logger.error("Unable to create a temporary directory for test: {}"
                 .format(str(e)))
    sys.exit(1)

try:
    logger.info("Running {}/{}"
                .format(args.runner, args.test))

    output, rc = runner_obj.run(tmp_dir, test_params)

    test_params['rc'] = rc

    tool_should_fail = test_params["should_fail"] == "1"
    tool_failed = test_params["rc"] != 0

    test_passed = rc < 126 and tool_should_fail == tool_failed

    if test_passed:
        logger.info("PASS: {}/{}".format(args.runner, args.test))
    else:
        logger.warning("FAIL: {}/{}".format(args.runner, args.test))

    with open(out, "w") as log:
        # start by writing params
        for p in test_params:
            log.write("{}: {}\n".format(p, test_params[p]))
        log.write("\n")

        # Preprocess
        regexp = None
        for line in output.split('\n'):
            log.write(line + '\n')

            m = re.search(':([a-z]+):([0-9\.]+):(.*)', line.rstrip().replace(' ', ''))
            if m and m.group(1) == 're':
                ex = m.group(3).split(':')
                if ex[0] == 'BEGIN':
                    r = runner_obj.mapexp(ex[1])
                    if r:
                        regexp = { 'x' : ':' + m.group(1) + ':' + m.group(2) + ':FOUND:' + ex[1], 'y' : r }
                elif ex[0] == 'END':
                    regexp = None
            elif regexp:
                inp = line.rstrip().lower()
                if regexp['y'] in inp:
                    log.write(regexp['x'] + '\n')
                    regexp = None

except Exception as e:
    logger.error("Unable to test {} using {}: {}"
                 .format(args.runner, args.test, str(e)))
    sys.exit(1)
finally:
    shutil.rmtree(tmp_dir)
